var documenterSearchIndex = {"docs":
[{"location":"api.html#Source-Receptor-Matrix-Tools","page":"API","title":"Source Receptor Matrix Tools","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"connect_to_isrm!\nrun_sr\nSRM\nSparseSRM\ncompute_receptor_emis","category":"page"},{"location":"api.html#InMAPSourceReceptorMatrices.connect_to_isrm!","page":"API","title":"InMAPSourceReceptorMatrices.connect_to_isrm!","text":"connect_to_isrm!(; region=\"us-east-2\", creds = nothing, url=\"s3://inmap-model/isrm_v1.2.1.zarr/\")\n\nConnects to AWS, opens the INMAP source receptor matrix with zopen (from Zarr.jl)\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.run_sr","page":"API","title":"InMAPSourceReceptorMatrices.run_sr","text":"run_sr(source_emis::DataFrame, [cell_variables]) -> receptor_emis::DataFrame\n\nRuns the source receptor matrix for the given source emissions, where each row represents an emitter.  Note that source_emis must have the following columns:\n\nlatitude <: Number - latitude of the source\nlongitude <: Number - longitude of the source\nlayer_idx <: Integer - layer index ∈ {1,2,3}, for effective emission heights at ground level (emissions between 0 and 57 m), low level (57–379 m), and high level (>379 m) respectively\n<emis_type> <: Number - the average emissions rate, in μg / s, for emission type <emis_type> ∈ {PM2_5, NOx, SO2, VOC, NH3}.  There can be between 1 and 5 of these columns.\n(optional) source_idx <: Int64 - which grid cell index corresponds to the source.  If given, latitude and longitude no longer used.\n\nReturns the receptor_emis table which contains columns for each of the PM types created by the source emissions, as well as columns for each of the variables in cell_variables, and a column for geometry_longlat, which contains the (lon, lat) geometry of each grid cell.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.SRM","page":"API","title":"InMAPSourceReceptorMatrices.SRM","text":"SRM(emis_type) -> srm::Array{Float32, 3}\n\nReturns source receptor matrix retrieved from fs, with emis_type ∈ (\"PrimaryPM25\", \"SOA\", \"pNO3\", \"pSO4\", \"pNH4\")\n\nNote that these are huge (52411 x 52411 x 3) and will require ~60-70GB of RAM to hold onto. Index via (receptor, source, layer). Care should be taken if multiple stored in memory.  May take 5-10 minutes to fetch from AWS.\n\nTo create a sparse SRM for only a select group of source locations, see make_sparse_srm.  (that will still call SRM, but will call garbage collection before returning the sparse matrix)\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.SparseSRM","page":"API","title":"InMAPSourceReceptorMatrices.SparseSRM","text":"SparseSRM(emis_type, source_idxs, [layer_idxs]; threshold=0.0)\n\nMake a sparse source receptor matrix, indexable via (receptor, source, layer).\n\nemis_type - The emission type for which to make the sparse matrix, ∈ (\"PrimaryPM25\", \"SOA\", \"pNO3\", \"pSO4\", \"pNH4\")\nsource_idxs - A vector of source indexes for which to add the pollution effects to the matrix\nlayer_idxs - A vector of layer_idxs for which to \nthreshold=0.0 - The threshold, in units (μg / m³) / (μg / s), above which to add the value to the sparse matrix.  Adds every nonzero value by default.\n\n\n\n\n\nSparseSRM(srm, source_idxs, [layer_idxs]; threshold=0.0)\n\nMake a sparse source receptor matrix from an SRM (Array{Float32, 3}).\n\nemis_type - The emission type for which to make the sparse matrix.\nsource_idxs - A vector of source indexes for which to add the pollution effects to the matrix\nlayer_idxs - A vector of layer_idxs for which to \nthreshold=0.0 - The threshold, in units (μg / m³) / (μg / s), above which to add the value to the sparse matrix.  Adds every nonzero value by default.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.compute_receptor_emis","page":"API","title":"InMAPSourceReceptorMatrices.compute_receptor_emis","text":"compute_receptor_emis(srm, source_idx(s), layer_idx(s), val(s)) -> receptor_emis::Vector\n\nCompute the emissions at each receptor from srm for each source specified by source_idx and layer_idx, which correspond to val(s)\n\ncompute_receptor_emis(srm, source_emis::Matrix) -> receptor_emis::Vector\n\nCompute the emissions at each receptor from srm for source_emis, a NSR x 3 matrix containing annual average emission rates at each grid cell and layer, in units of micrograms per second.\n\nsrm can be any of the following types:\n\nArray{Float64, 3} - returned by SRM\nSparseSRM\nString - pm emission type ∈ (\"PrimaryPM25\", \"SOA\", \"pNO3\", \"pSO4\", \"pNH4\")\n\n\n\n\n\n","category":"function"},{"location":"api.html#Cell-Data","page":"API","title":"Cell Data","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"get_isrm_variable_summary\nget_isrm_cell_data\nget_isrm_fs","category":"page"},{"location":"api.html#InMAPSourceReceptorMatrices.get_isrm_variable_summary","page":"API","title":"InMAPSourceReceptorMatrices.get_isrm_variable_summary","text":"get_isrm_variable_summary() -> summary::DataFrame\n\nReturns a summary of the variables in the source receptor matrix\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.get_isrm_cell_data","page":"API","title":"InMAPSourceReceptorMatrices.get_isrm_cell_data","text":"get_isrm_cell_data(vars::AbstractVector{<:AbstractString}; geometry=true) -> cell_data::DataFrame\n\nTo see list of available variables, see get_isrm_variable_summary\n\n\n\n\n\nget_isrm_cell_data(var::AbstractString) -> v::Vector\n\nFetch the grid-cell data for the variable var.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.get_isrm_fs","page":"API","title":"InMAPSourceReceptorMatrices.get_isrm_fs","text":"get_isrm_fs() -> fs\n\nReturn the AWS file system. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Geometry","page":"API","title":"Geometry","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"longlat2isrm\nisrm2longlat\nget_isrm_cell_geom\nget_isrm_cell_geom_longlat\nget_cell_idxs","category":"page"},{"location":"api.html#InMAPSourceReceptorMatrices.longlat2isrm","page":"API","title":"InMAPSourceReceptorMatrices.longlat2isrm","text":"longlat2isrm() -> trans\n\nReturns a Proj.Transformation for converting from (lon, lat) to the LCC coordinate system used by ISRM:\n\n+proj=lcc +lat_1=33.000000 +lat_2=45.000000 +lat_0=40.000000 +lon_0=-97.000000 +x_0=0 +y_0=0 +a=6370997.000000 +b=6370997.000000 +to_meter=1.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.isrm2longlat","page":"API","title":"InMAPSourceReceptorMatrices.isrm2longlat","text":"isrm2longlat() -> trans\n\nReturns a Proj.Transformation for converting to (lon, lat) from the LCC coordinate system used by ISRM:\n\n+proj=lcc +lat_1=33.000000 +lat_2=45.000000 +lat_0=40.000000 +lon_0=-97.000000 +x_0=0 +y_0=0 +a=6370997.000000 +b=6370997.000000 +to_meter=1.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.get_isrm_cell_geom","page":"API","title":"InMAPSourceReceptorMatrices.get_isrm_cell_geom","text":"get_isrm_cell_geom() -> geom::Vector{Box{2, Float64}}\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.get_isrm_cell_geom_longlat","page":"API","title":"InMAPSourceReceptorMatrices.get_isrm_cell_geom_longlat","text":"get_isrm_cell_geom_longlat(geom::Vector{Box{2, Float64}}) -> geom::Vector{Quadrangle{2, Float64}}\n\nReturns the cell geometry of the SRM in longlat form.\n\n\n\n\n\n","category":"function"},{"location":"api.html#InMAPSourceReceptorMatrices.get_cell_idxs","page":"API","title":"InMAPSourceReceptorMatrices.get_cell_idxs","text":"get_cell_idxs(longlats, cell_geom::Vector; threshold = 1000) -> cell_idxs\n\nget_cell_idxs(longs, lats, cell_geom::Vector; threshold = 1000) -> cell_idxs\n\nReturn the indices of the closest cells (in cell_geom) for each of the longs and lats supplied. If there is no grid cell within threshold meters from the point in cell_geom, gives an index of 0. cell_geom can either be the original geometry (represented as Boxes), or the longlat geometry (represented as Quadrangles).\n\n\n\n\n\n","category":"function"},{"location":"index.html#InMAPSourceReceptorMatrices.jl","page":"Home","title":"InMAPSourceReceptorMatrices.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: GitHub contributors) (Image: GitHub last commit) (Image: License: GPL v3) (Image: CI) (Image: Code Coverage) (Image: In Development)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Provides a julia interface to access the Intervention Model for Air Pollution (InMAP) Source Receptor Matrix (SRM).  Uses AWS.jl and Zarr.jl to access the compressed version of the matrix from s3://inmap-model/isrm_v1.2.1.zarr/.  Source-receptor matrices allow users to approximate an air quality model simulation without having to run a full air quality model simulation.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For information about InMAP, see their website at https://inmap.run/.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"InMAPSourceReceptorMatrices\")","category":"page"},{"location":"index.html#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Here is an example - given a set of latitudes, longitudes and layers and their associated emissions:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using InMAPSourceReceptorMatrices, DataFrames\ndf = DataFrame(\n    latitude = [38.90938938381084],\n    longitude = [-77.03759400518372],\n    layer_idxs = [2],\n    PM2_5 = [1.0],\n    VOC = [1.0],\n    NOx = [1.0],\n    SO2 = [1.0],\n    NH3 = [1.0]\n)\nresults = run_sr(df, [\"MortalityRate\"])","category":"page"}]
}
